#lang racket
(define (square x) (* x x))
(define (sum-of-square-of-biggest a b c)
  (if (> a c)
      (+ (square (if (> b c) b c))
         (square a))
      (+ (square (if (> b a) b a))
         (square c))))

(= (sum-of-square-of-biggest 3 2 3) 18)
(= (sum-of-square-of-biggest 1 2 3) 13)
(= (sum-of-square-of-biggest 3 2 1) 13)
(= (sum-of-square-of-biggest 1 3 2) 13)
(= (sum-of-square-of-biggest 3 1 1) 10)
(= (sum-of-square-of-biggest 2 2 2) 8)
(= (sum-of-square-of-biggest 0 0 2) 4)
(= (sum-of-square-of-biggest 1 -2 -2) 5)
