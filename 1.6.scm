(define (square x) (* x x))
(define (improve guess x) (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
(define (sqrt x)
  (sqrt-iter 1.0 x))

; Что получится, когда Лиза попытается использовать эту процедуру для вычисления квадратных корней? Объясните.
;
; При нормальном порядвке вычисления всё будет работать как и прежде.
; При апликативном порядке происходит зависание и, как следствие, утечка памяти.
; Объяснение: Ева и Лиза не видят различия между if и new-if, скорее всего не делали задание 1.5 и не понимают почему if особая
; форма.(Может потому что они бабы?) Так как new-if обычная процедура, то для неё при апликативном порядке вычисления
; будут вычисляться все аргументы, т.е. рекурсия будет углубляться даже не собираясь выходить по условию выхода. Для
; нормального порядка и для  такое поведение не наблюдается, поскольку аргументы вычесляются после подстановки в тело процедуры