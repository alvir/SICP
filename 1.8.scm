#lang scheme
(define (square x) (* x x))
(define (cube x) (* (square x) x))
(define (improve guess x)
  (/ (+ (/ x (square guess))
        (* 2 guess))
     3))
(define (good-enough? guess1 guess2)
  (< (abs (/ (- guess1 guess2)
             guess2))
     0.001))
(define (cubert-iter guess x)
  (define (iter)
    (improve guess x))
  (if (good-enough? guess (iter))
      (iter)
      (cubert-iter (iter) x)))
(define (cubert x)
  (if (< (abs x) 0.001)
      0
      (cubert-iter 1.0 x)))

(cube (cubert 27))
(cube (cubert 0.001))
(cube (cubert -343))
(cube (cubert 0.0))
