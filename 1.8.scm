#lang scheme
(define (square x) (* x x))
(define (cube x) (* (square x) x))
(define (improve guess x) 
  (/ (+ (/ x (square guess))
        (* 2 guess))
     3))
(define (good-enough? guess0 guess1)
  (< (abs (- guess0 guess1)) 0.0001))
(define (cubert-iter guess0 guess1 x)
  (if (good-enough? guess0 guess1)
      guess1
      (cubert-iter guess1 (improve guess1 x) x)))
(define (cubert x)
  (cubert-iter 1.0 2.0 x))
(cube (cubert 27))
(cube (cubert 0.001))
(cube (cubert -343))
(cube (cubert 0.0))
(cube (cubert 1e15))
